generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  password      String?
  emailVerified Boolean?   @default(false)
  image         String?
  purchases     Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]

  @@map("user")
}

model Purchase {
  id          String         @id @default(cuid())
  supermarket String
  address     String?
  date        DateTime
  total       Float
  status      PurchaseStatus @default(IN_PROCESS)

  products Product[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  User User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId String?

  @@map("purchase")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  category    String
  price       Float
  quantity    Int
  description String?
  total       Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Purchase Purchase? @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  purchaseId String?

  @@map("product")
}

enum PurchaseStatus {
  IN_PROCESS
  COMPLETED
  CANCELLED
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}
